import numpy as np
import pdb
import pandas as pd
from tqdm import tqdm
from bs4 import BeautifulSoup
import requests
import os

scraped_antigens = {}


def scrape_antigen_seq(pdb_id):
    if pdb_id in scraped_antigens:
        print("haha skiping! ", pdb_id)
        return scraped_antigens[pdb_id]
    url = f"https://opig.stats.ox.ac.uk/webapps/sabdab-sabpred/sabdab/structureviewer/?pdb={pdb_id}"
    html_data = requests.get(url).content
    soup = BeautifulSoup(html_data, "lxml")

    tables = soup.findAll("table", class_="table-results")

    total_antigen_seqs = ""
    for table in tables:
        # Find the table rows
        rows = table.find_all("tr")
        antigen_seq = [
            row.get_text() for row in rows if "Antigen sequence" in row.get_text()
        ]
        if len(antigen_seq) > 0:
            total_antigen_seqs = antigen_seq[0][len("Antigen sequence") :]
            break

    scraped_antigens[pdb_id] = total_antigen_seqs
    print(total_antigen_seqs)
    return total_antigen_seqs


# source_df = pd.read_csv("sabdab_summary_all.tsv", delimiter="\t")

# destination_file = "processed_sabdab_summary_all.csv"
# if os.path.exists(destination_file):
#     destination_df = pd.read_csv(destination_file)
# else:
#     destination_df = source_df.copy()
#     destination_df["antigen_seq"] = ""

# for row_idx, row in tqdm(source_df.iterrows(), total=len(source_df)):
#     if destination_df.iloc[row_idx]["antigen_seq"] != "" and not (
#         pd.isna(destination_df.iloc[row_idx]["antigen_seq"])
#     ):
#         continue
#     pdb_id = row["pdb"]
#     row["antigen_seq"] = scrape_antigen_seq(pdb_id)
#     destination_df.iloc[row_idx] = row
#     destination_df.to_csv(destination_file, index=False)


# destination_file = "processed_sabdab_summary_all.csv"
# destination_df = pd.read_csv(destination_file)

# https://www.uniprot.org/uniprot/P35579, max score is 9828.0
seq1 = "MAQQAADKYLYVDKNFINNPLAQADWAAKKLVWVPSDKSGFEPASLKEEVGEEAIVELVENGKKVKVNKDDIQKMNPPKFSKVEDMAELTCLNEASVLHNLKERYYSGLIYTYSGLFCVVINPYKNLPIYSEEIVEMYKGKKRHEMPPHIYAITDTAYRSMMQDREDQSILCTGESGAGKTENTKKVIQYLAYVASSHKSKKDQGELERQLLQANPILEAFGNAKTVKNDNSSRFGKFIRINFDVNGYIVGANIETYLLEKSRAIRQAKEERTFHIFYYLLSGAGEHLKTDLLLEPYNKYRFLSNGHVTIPGQQDKDMFQETMEAMRIMGIPEEEQMGLLRVISGVLQLGNIVFKKERNTDQASMPDNTAAQKVSHLLGINVTDFTRGILTPRIKVGRDYVQKAQTKEQADFAIEALAKATYERMFRWLVLRINKALDKTKRQGASFIGILDIAGFEIFDLNSFEQLCINYTNEKLQQLFNHTMFILEQEEYQREGIEWNFIDFGLDLQPCIDLIEKPAGPPGILALLDEECWFPKATDKSFVEKVMQEQGTHPKFQKPKQLKDKADFCIIHYAGKVDYKADEWLMKNMDPLNDNIATLLHQSSDKFVSELWKDVDRIIGLDQVAGMSETALPGAFKTRKGMFRTVGQLYKEQLAKLMATLRNTNPNFVRCIIPNHEKKAGKLDPHLVLDQLRCNGVLEGIRICRQGFPNRVVFQEFRQRYEILTPNSIPKGFMDGKQACVLMIKALELDSNLYRIGQSKVFFRAGVLAHLEEERDLKITDVIIGFQACCRGYLARKAFAKRQQQLTAMKVLQRNCAAYLKLRNWQWWRLFTKVKPLLQVSRQEEEMMAKEEELVKVREKQLAAENRLTEMETLQSQLMAEKLQLQEQLQAETELCAEAEELRARLTAKKQELEEICHDLEARVEEEEERCQHLQAEKKKMQQNIQELEEQLEEEESARQKLQLEKVTTEAKLKKLEEEQIILEDQNCKLAKEKKLLEDRIAEFTTNLTEEEEKSKSLAKLKNKHEAMITDLEERLRREEKQRQELEKTRRKLEGDSTDLSDQIAELQAQIAELKMQLAKKEEELQAALARVEEEAAQKNMALKKIRELESQISELQEDLESERASRNKAEKQKRDLGEELEALKTELEDTLDSTAAQQELRSKREQEVNILKKTLEEEAKTHEAQIQEMRQKHSQAVEELAEQLEQTKRVKANLEKAKQTLENERGELANEVKVLLQGKGDSEHKRKKVEAQLQELQVKFNEGERVRTELADKVTKLQVELDNVTGLLSQSDSKSSKLTKDFSALESQLQDTQELLQEENRQKLSLSTKLKQVEDEKNSFREQLEEEEEAKHNLEKQIATLHAQVADMKKKMEDSVGCLETAEEVKRKLQKDLEGLSQRHEEKVAAYDKLEKTKTRLQQELDDLLVDLDHQRQSACNLEKKQKKFDQLLAEEKTISAKYAEERDRAEAEAREKETKALSLARALEEAMEQKAELERLNKQFRTEMEDLMSSKDDVGKSVHELEKSKRALEQQVEEMKTQLEELEDELQATEDAKLRLEVNLQAMKAQFERDLQGRDEQSEEKKKQLVRQVREMEAELEDERKQRSMAVAARKKLEMDLKDLEAHIDSANKNRDEAIKQLRKLQAQMKDCMRELDDTRASREEILAQAKENEKKLKSMEAEMIQLQEELAAAERAKRQAQQERDELADEIANSSGKGALALEEKRRLEARIAQLEEELEEEQGNTELINDRLKKANLQIDQINTDLNLERSHAQKNENARQQLERQNKELKVKLQEMEGTVKSKYKASITALEAKIAQLEEQLDNETKERQAACKQVRRTEKKLKDVLLQVDDERRNAEQYKDQADKASTRLKQLKRQLEEAEEEAQRANASRRKLQRELEDATETADAMNREVSSLKNKLRRGDLPFVVPRRMARKGAGDGSDEEVDGKADGAEAKPAE"
# https://www.uniprot.org/uniprotkb/P35580/entry, max score is 9890.0
seq2 = "MAQRTGLEDPERYLFVDRAVIYNPATQADWTAKKLVWIPSERHGFEAASIKEERGDEVMVELAENGKKAMVNKDDIQKMNPPKFSKVEDMAELTCLNEASVLHNLKDRYYSGLIYTYSGLFCVVINPYKNLPIYSENIIEMYRGKKRHEMPPHIYAISESAYRCMLQDREDQSILCTGESGAGKTENTKKVIQYLAHVASSHKGRKDHNIPGELERQLLQANPILESFGNAKTVKNDNSSRFGKFIRINFDVTGYIVGANIETYLLEKSRAVRQAKDERTFHIFYQLLSGAGEHLKSDLLLEGFNNYRFLSNGYIPIPGQQDKDNFQETMEAMHIMGFSHEEILSMLKVVSSVLQFGNISFKKERNTDQASMPENTVAQKLCHLLGMNVMEFTRAILTPRIKVGRDYVQKAQTKEQADFAVEALAKATYERLFRWLVHRINKALDRTKRQGASFIGILDIAGFEIFELNSFEQLCINYTNEKLQQLFNHTMFILEQEEYQREGIEWNFIDFGLDLQPCIDLIERPANPPGVLALLDEECWFPKATDKTFVEKLVQEQGSHSKFQKPRQLKDKADFCIIHYAGKVDYKADEWLMKNMDPLNDNVATLLHQSSDRFVAELWKDVDRIVGLDQVTGMTETAFGSAYKTKKGMFRTVGQLYKESLTKLMATLRNTNPNFVRCIIPNHEKRAGKLDPHLVLDQLRCNGVLEGIRICRQGFPNRIVFQEFRQRYEILTPNAIPKGFMDGKQACERMIRALELDPNLYRIGQSKIFFRAGVLAHLEEERDLKITDIIIFFQAVCRGYLARKAFAKKQQQLSALKVLQRNCAAYLKLRHWQWWRVFTKVKPLLQVTRQEEELQAKDEELLKVKEKQTKVEGELEEMERKHQQLLEEKNILAEQLQAETELFAEAEEMRARLAAKKQELEEILHDLESRVEEEEERNQILQNEKKKMQAHIQDLEEQLDEEEGARQKLQLEKVTAEAKIKKMEEEILLLEDQNSKFIKEKKLMEDRIAECSSQLAEEEEKAKNLAKIRNKQEVMISDLEERLKKEEKTRQELEKAKRKLDGETTDLQDQIAELQAQIDELKLQLAKKEEELQGALARGDDETLHKNNALKVVRELQAQIAELQEDFESEKASRNKAEKQKRDLSEELEALKTELEDTLDTTAAQQELRTKREQEVAELKKALEEETKNHEAQIQDMRQRHATALEELSEQLEQAKRFKANLEKNKQGLETDNKELACEVKVLQQVKAESEHKRKKLDAQVQELHAKVSEGDRLRVELAEKASKLQNELDNVSTLLEEAEKKGIKFAKDAASLESQLQDTQELLQEETRQKLNLSSRIRQLEEEKNSLQEQQEEEEEARKNLEKQVLALQSQLADTKKKVDDDLGTIESLEEAKKKLLKDAEALSQRLEEKALAYDKLEKTKNRLQQELDDLTVDLDHQRQVASNLEKKQKKFDQLLAEEKSISARYAEERDRAEAEAREKETKALSLARALEEALEAKEEFERQNKQLRADMEDLMSSKDDVGKNVHELEKSKRALEQQVEEMRTQLEELEDELQATEDAKLRLEVNMQAMKAQFERDLQTRDEQNEEKKRLLIKQVRELEAELEDERKQRALAVASKKKMEIDLKDLEAQIEAANKARDEVIKQLRKLQAQMKDYQRELEEARASRDEIFAQSKESEKKLKSLEAEILQLQEELASSERARRHAEQERDELADEITNSASGKSALLDEKRRLEARIAQLEEELEEEQSNMELLNDRFRKTTLQVDTLNAELAAERSAAQKSDNARQQLERQNKELKAKLQELEGAVKSKFKATISALEAKIGQLEEQLEQEAKERAAANKLVRRTEKKLKEIFMQVEDERRHADQYKEQMEKANARMKQLKRQLEEAEEEATRANASRRKLQRELDDATEANEGLSREVSTLKNRLRRGGPISFSSSRSGRRQLHLEGASLELSDDDTESKTSDVNETQPPQSE"
# https://www.uniprot.org/uniprotkb/P35749/entry, max score is 9836.0
seq3 = "MAQKGQLSDDEKFLFVDKNFINSPVAQADWAAKRLVWVPSEKQGFEAASIKEEKGDEVVVELVENGKKVTVGKDDIQKMNPPKFSKVEDMAELTCLNEASVLHNLRERYFSGLIYTYSGLFCVVVNPYKHLPIYSEKIVDMYKGKKRHEMPPHIYAIADTAYRSMLQDREDQSILCTGESGAGKTENTKKVIQYLAVVASSHKGKKDTSITGELEKQLLQANPILEAFGNAKTVKNDNSSRFGKFIRINFDVTGYIVGANIETYLLEKSRAIRQARDERTFHIFYYMIAGAKEKMRSDLLLEGFNNYTFLSNGFVPIPAAQDDEMFQETVEAMAIMGFSEEEQLSILKVVSSVLQLGNIVFKKERNTDQASMPDNTAAQKVCHLMGINVTDFTRSILTPRIKVGRDVVQKAQTKEQADFAVEALAKATYERLFRWILTRVNKALDKTHRQGASFLGILDIAGFEIFEVNSFEQLCINYTNEKLQQLFNHTMFILEQEEYQREGIEWNFIDFGLDLQPCIELIERPNNPPGVLALLDEECWFPKATDKSFVEKLCTEQGSHPKFQKPKQLKDKTEFSIIHYAGKVDYNASAWLTKNMDPLNDNVTSLLNASSDKFVADLWKDVDRIVGLDQMAKMTESSLPSASKTKKGMFRTVGQLYKEQLGKLMTTLRNTTPNFVRCIIPNHEKRSGKLDAFLVLEQLRCNGVLEGIRICRQGFPNRIVFQEFRQRYEILAANAIPKGFMDGKQACILMIKALELDPNLYRIGQSKIFFRTGVLAHLEEERDLKITDVIMAFQAMCRGYLARKAFAKRQQQLTAMKVIQRNCAAYLKLRNWQWWRLFTKVKPLLQVTRQEEEMQAKEDELQKTKERQQKAENELKELEQKHSQLTEEKNLLQEQLQAETELYAEAEEMRVRLAAKKQELEEILHEMEARLEEEEDRGQQLQAERKKMAQQMLDLEEQLEEEEAARQKLQLEKVTAEAKIKKLEDEILVMDDQNNKLSKERKLLEERISDLTTNLAEEEEKAKNLTKLKNKHESMISELEVRLKKEEKSRQELEKLKRKLEGDASDFHEQIADLQAQIAELKMQLAKKEEELQAALARLDDEIAQKNNALKKIRELEGHISDLQEDLDSERAARNKAEKQKRDLGEELEALKTELEDTLDSTATQQELRAKREQEVTVLKKALDEETRSHEAQVQEMRQKHAQAVEELTEQLEQFKRAKANLDKNKQTLEKENADLAGELRVLGQAKQEVEHKKKKLEAQVQELQSKCSDGERARAELNDKVHKLQNEVESVTGMLNEAEGKAIKLAKDVASLSSQLQDTQELLQEETRQKLNVSTKLRQLEEERNSLQDQLDEEMEAKQNLERHISTLNIQLSDSKKKLQDFASTVEALEEGKKRFQKEIENLTQQYEEKAAAYDKLEKTKNRLQQELDDLVVDLDNQRQLVSNLEKKQRKFDQLLAEEKNISSKYADERDRAEAEAREKETKALSLARALEEALEAKEELERTNKMLKAEMEDLVSSKDDVGKNVHELEKSKRALETQMEEMKTQLEELEDELQATEDAKLRLEVNMQALKGQFERDLQARDEQNEEKRRQLQRQLHEYETELEDERKQRALAAAAKKKLEGDLKDLELQADSAIKGREEAIKQLRKLQAQMKDFQRELEDARASRDEIFATAKENEKKAKSLEADLMQLQEDLAAAERARKQADLEKEELAEELASSLSGRNALQDEKRRLEARIAQLEEELEEEQGNMEAMSDRVRKATQQAEQLSNELATERSTAQKNESARQQLERQNKELRSKLHEMEGAVKSKFKSTIAALEAKIAQLEEQVEQEAREKQAATKSLKQKDKKLKEILLQVEDERKMAEQYKEQAEKGNARVKQLKRQLEEAEEESQRINANRRKLQRELDEATESNEAMGREVNALKSKLRRGNETSFVPSRRSGGRRVIENADGSEEETDTRDADFNGTKASE"
# https://www.uniprot.org/uniprotkb/Q15746/entry, max score is 10015.0
seq4 = "MGDVKLVASSHISKTSLSVDPSRVDSMPLTEAPAFILPPRNLCIKEGATAKFEGRVRGYPEPQVTWHRNGQPITSGGRFLLDCGIRGTFSLVIHAVHEEDRGKYTCEATNGSGARQVTVELTVEGSFAKQLGQPVVSKTLGDRFSAPAVETRPSIWGECPPKFATKLGRVVVKEGQMGRFSCKITGRPQPQVTWLKGNVPLQPSARVSVSEKNGMQVLEIHGVNQDDVGVYTCLVVNGSGKASMSAELSIQGLDSANRSFVRETKATNSDVRKEVTNVISKESKLDSLEAAAKSKNCSSPQRGGSPPWAANSQPQPPRESKLESCKDSPRTAPQTPVLQKTSSSITLQAARVQPEPRAPGLGVLSPSGEERKRPAPPRPATFPTRQPGLGSQDVVSKAANRRIPMEGQRDSAFPKFESKPQSQEVKENQTVKFRCEVSGIPKPEVAWFLEGTPVRRQEGSIEVYEDAGSHYLCLLKARTRDSGTYSCTASNAQGQLSCSWTLQVERLAVMEVAPSFSSVLKDCAVIEGQDFVLQCSVRGTPVPRITWLLNGQPIQYARSTCEAGVAELHIQDALPEDHGTYTCLAENALGQVSCSAWVTVHEKKSSRKSEYLLPVAPSKPTAPIFLQGLSDLKVMDGSQVTMTVQVSGNPPPEVIWLHNGNEIQESEDFHFEQRGTQHSLCIQEVFPEDTGTYTCEAWNSAGEVRTQAVLTVQEPHDGTQPWFISKPRSVTASLGQSVLISCAIAGDPFPTVHWLRDGKALCKDTGHFEVLQNEDVFTLVLKKVQPWHAGQYEILLKNRVGECSCQVSLMLQNSSARALPRGREPASCEDLCGGGVGADGGGSDRYGSLRPGWPARGQGWLEEEDGEDVRGVLKRRVETRQHTEEAIRQQEVEQLDFRDLLGKKVSTKTLSEDDLKEIPAEQMDFRANLQRQVKPKTVSEEERKVHSPQQVDFRSVLAKKGTSKTPVPEKVPPPKPATPDFRSVLGGKKKLPAENGSSSAETLNAKAVESSKPLSNAQPSGPLKPVGNAKPAETLKPMGNAKPAETLKPMGNAKPDENLKSASKEELKKDVKNDVNCKRGHAGTTDNEKRSESQGTAPAFKQKLQDVHVAEGKKLLLQCQVSSDPPATIIWTLNGKTLKTTKFIILSQEGSLCSVSIEKALPEDRGLYKCVAKNDAGQAECSCQVTVDDAPASENTKAPEMKSRRPKSSLPPVLGTESDATVKKKPAPKTPPKAAMPPQIIQFPEDQKVRAGESVELFGKVTGTQPITCTWMKFRKQIQESEHMKVENSENGSKLTILAARQEHCGCYTLLVENKLGSRQAQVNLTVVDKPDPPAGTPCASDIRSSSLTLSWYGSSYDGGSAVQSYSIEIWDSANKTWKELATCRSTSFNVQDLLPDHEYKFRVRAINVYGTSEPSQESELTTVGEKPEEPKDEVEVSDDDEKEPEVDYRTVTINTEQKVSDFYDIEERLGSGKFGQVFRLVEKKTRKVWAGKFFKAYSAKEKENIRQEISIMNCLHHPKLVQCVDAFEEKANIVMVLEIVSGGELFERIIDEDFELTERECIKYMRQISEGVEYIHKQGIVHLDLKPENIMCVNKTGTRIKLIDFGLARRLENAGSLKVLFGTPEFVAPEVINYEPIGYATDMWSIGVICYILVSGLSPFMGDNDNETLANVTSATWDFDDEAFDEISDDAKDFISNLLKKDMKNRLDCTQCLQHPWLMKDTKNMEAKKLSKDRMKKYMARRKWQKTGNAVRAIGRLSSMAMISGLSGRKSSTGSPTSPLNAEKLESEEDVSQAFLEAVAEEKPHVKPYFSKTIRDLEVVEGSAARFDCKIEGYPDPEVVWFKDDQSIRESRHFQIDYDEDGNCSLIISDVCGDDDAKYTCKAVNSLGEATCTAELIVETMEEGEGEGEEEEE"
# https://www.uniprot.org/uniprotkb/P12883/entry, max score is 9712.0
seq5 = "MGDSEMAVFGAAAPYLRKSEKERLEAQTRPFDLKKDVFVPDDKQEFVKAKIVSREGGKVTAETEYGKTVTVKEDQVMQQNPPKFDKIEDMAMLTFLHEPAVLYNLKDRYGSWMIYTYSGLFCVTVNPYKWLPVYTPEVVAAYRGKKRSEAPPHIFSISDNAYQYMLTDRENQSILITGESGAGKTVNTKRVIQYFAVIAAIGDRSKKDQSPGKGTLEDQIIQANPALEAFGNAKTVRNDNSSRFGKFIRIHFGATGKLASADIETYLLEKSRVIFQLKAERDYHIFYQILSNKKPELLDMLLITNNPYDYAFISQGETTVASIDDAEELMATDNAFDVLGFTSEEKNSMYKLTGAIMHFGNMKFKLKQREEQAEPDGTEEADKSAYLMGLNSADLLKGLCHPRVKVGNEYVTKGQNVQQVIYATGALAKAVYERMFNWMVTRINATLETKQPRQYFIGVLDIAGFEIFDFNSFEQLCINFTNEKLQQFFNHHMFVLEQEEYKKEGIEWTFIDFGMDLQACIDLIEKPMGIMSILEEECMFPKATDMTFKAKLFDNHLGKSANFQKPRNIKGKPEAHFSLIHYAGIVDYNIIGWLQKNKDPLNETVVGLYQKSSLKLLSTLFANYAGADAPIEKGKGKAKKGSSFQTVSALHRENLNKLMTNLRSTHPHFVRCIIPNETKSPGVMDNPLVMHQLRCNGVLEGIRICRKGFPNRILYGDFRQRYRILNPAAIPEGQFIDSRKGAEKLLSSLDIDHNQYKFGHTKVFFKAGLLGLLEEMRDERLSRIITRIQAQSRGVLARMEYKKLLERRDSLLVIQWNIRAFMGVKNWPWMKLYFKIKPLLKSAEREKEMASMKEEFTRLKEALEKSEARRKELEEKMVSLLQEKNDLQLQVQAEQDNLADAEERCDQLIKNKIQLEAKVKEMNERLEDEEEMNAELTAKKRKLEDECSELKRDIDDLELTLAKVEKEKHATENKVKNLTEEMAGLDEIIAKLTKEKKALQEAHQQALDDLQAEEDKVNTLTKAKVKLEQQVDDLEGSLEQEKKVRMDLERAKRKLEGDLKLTQESIMDLENDKQQLDERLKKKDFELNALNARIEDEQALGSQLQKKLKELQARIEELEEELEAERTARAKVEKLRSDLSRELEEISERLEEAGGATSVQIEMNKKREAEFQKMRRDLEEATLQHEATAAALRKKHADSVAELGEQIDNLQRVKQKLEKEKSEFKLELDDVTSNMEQIIKAKANLEKMCRTLEDQMNEHRSKAEETQRSVNDLTSQRAKLQTENGELSRQLDEKEALISQLTRGKLTYTQQLEDLKRQLEEEVKAKNALAHALQSARHDCDLLREQYEEETEAKAELQRVLSKANSEVAQWRTKYETDAIQRTEELEEAKKKLAQRLQEAEEAVEAVNAKCSSLEKTKHRLQNEIEDLMVDVERSNAAAAALDKKQRNFDKILAEWKQKYEESQSELESSQKEARSLSTELFKLKNAYEESLEHLETFKRENKNLQEEISDLTEQLGSSGKTIHELEKVRKQLEAEKMELQSALEEAEASLEHEEGKILRAQLEFNQIKAEIERKLAEKDEEMEQAKRNHLRVVDSLQTSLDAETRSRNEALRVKKKMEGDLNEMEIQLSHANRMAAEAQKQVKSLQSLLKDTQIQLDDAVRANDDLKENIAIVERRNNLLQAELEELRAVVEQTERSRKLAEQELIETSERVQLLHSQNTSLINQKKKMDADLSQLQTEVEEAVQECRNAEEKAKKAITDAAMMAEELKKEQDTSAHLERMKKNMEQTIKDLQHRLDEAEQIALKGGKKQLQKLEARVRELENELEAEQKRNAESVKGMRKSERRIKELTYQTEEDRKNLLRLQDLVDKLQLKVKAYKRQAEEAEEQANTNLSKFRKVQHELDEAEERADIAESQVNKLRAKSRDIGTKGLNEE"

seqs = [seq1, seq2, seq3, seq4, seq5]


# # from Bio.Align import PairwiseAligner
# # from Bio.Align import substitution_matrices


# # aligner = PairwiseAligner()
# # aligner.mode = "global"
# # aligner.substitution_matrix = substitution_matrices.load("BLOSUM62")
# # alignment = aligner.align(seq1, seq1)
# # max(alignment, key=lambda a: a.score).score

computed_scores = {}


def filter_non_amino_acids(sequence):
    valid_amino_acids = "ACDEFGHIKLMNPQRSTVWY"
    filtered_sequence = "".join([aa for aa in sequence if aa in valid_amino_acids])
    return filtered_sequence


from Bio import pairwise2
from Bio.SubsMat import MatrixInfo as matlist


def get_blosum_score(seq1, seq2, matrix=matlist.blosum62):
    # alignment = aligner.align(antigen, comparison_seq)
    # best_alignment_score = max(alignment, key=lambda a: a.score).score
    # comparison_scores.append(best_alignment_score)

    alignments = pairwise2.align.globalds(seq1, seq2, matrix, -10, -1)
    if len(alignments) > 1:
        return alignments[0][2]
    else:
        return -np.inf


def check_alignment(
    antigen_of_interest,
    comparison_sequences=seqs,
):
    if antigen_of_interest in computed_scores:
        return computed_scores[antigen_of_interest]
    comparison_scores = []
    max_scores = []

    # This is to handle the case of '/' in the sequence... e.g. https://opig.stats.ox.ac.uk/webapps/sabdab-sabpred/sabdab/structureviewer/?pdb=8tpa
    # Not particularly gracefully, but it'll do, just concat everything
    for antigen in antigen_of_interest.split("/"):
        antigen = filter_non_amino_acids(antigen)
        for comparison_seq in comparison_sequences:
            comparison_scores.append(get_blosum_score(antigen, comparison_seq))

        max_scores.append(get_blosum_score(antigen, antigen))

    computed_scores[antigen_of_interest] = (comparison_scores, max_scores)

    return comparison_scores, max_scores


# second_destination_file = "comparison_sabdab_summary_all.csv"
# if os.path.exists(second_destination_file):
#     second_destination_df = pd.read_csv(second_destination_file)
# else:
#     second_destination_df = destination_df.copy()
#     second_destination_df["scores"] = ""
#     second_destination_df["theoretical_max_score"] = ""


# best_score_ratio = -np.inf
# for row_idx, row in tqdm(destination_df.iterrows(), total=len(destination_df)):
#     if second_destination_df.iloc[row_idx]["scores"] != "" and not (
#         pd.isna(second_destination_df.iloc[row_idx]["scores"])
#     ):
#         continue

#     if type(row["antigen_seq"]) == float:
#         continue

#     scores, max_scores = check_alignment(row["antigen_seq"])
#     row["scores"] = scores
#     row["theoretical_max_score"] = max_scores
#     score_ratio = np.mean(scores) / np.mean(max_scores)
#     if best_score_ratio < score_ratio:
#         best_score_ratio = score_ratio

#     print(f"score ratio: {score_ratio} best score ratio: {best_score_ratio}")

#     second_destination_df.iloc[row_idx] = row
#     second_destination_df.to_csv(second_destination_file, index=False)


second_destination_file = "comparison_sabdab_summary_all.csv"
second_destination_df = pd.read_csv(second_destination_file)
import json
def try_json_loading(json_str):
    try:
        return json.loads(json_str)
    except:
        return None

scores = [(idx, try_json_loading(x)) for idx, x in enumerate(second_destination_df['scores'].to_list()) if try_json_loading(x) is not None]
scores_sorted = sorted([(idx, np.mean(score_list)) for idx, score_list in scores], key=lambda x: x[1], reverse=True)
pdb.set_trace()
pass
